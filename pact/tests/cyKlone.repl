(env-data {"disable-marmalade":1})
(load "../kadena_repl_sandbox/kda-env/init.repl")

;; Define the governance keyset
(begin-tx)
(namespace 'free)
(env-data {'ks:["governance-key"]})
(env-keys ["governance-key"] )
(define-keyset "free.cyKlone-test-ks" (read-keyset 'ks))
(commit-tx)

;; Load Poseidon contracts
(begin-tx)
(namespace 'free)
(load "../pact-zk-hashes/pact/contracts/poseidon-constants.pact")
(load "../pact-zk-hashes/pact/contracts/poseidon.pact")
(commit-tx)

;; Load cyKlone
(begin-tx)
(env-keys ["governance-key"] )
(namespace 'free)
(load "../contracts/cyklone-withdraw-verifier-v0.pact")
(load "../contracts/cyklone.pact")
(create-table pool-state)
(create-table nullifiers)
(create-table deposits)
(add-pool "10KDA" 10.0)
(coin.create-account WORK-GAS-STATION basic-guards.GUARD_SUCCESS)
(commit-tx)

; Load test vectors and utils in the root namespace
(begin-tx)
(load "test-vectors.pact")
(commit-tx)

(env-data {'pool:"10KDA"})
; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
;;; First Alice Deposit
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
; Verify the balance before
(expect "Balance before deposit" 1000.0 (coin.get-balance "alice"))

;Do the deposit
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 11.0)]}])
(deposit "alice" DEPOSIT_0)

; Try to deposit 2 times
(expect-failure "Can't deposit 2 times with the same commitment" "already submitted" (deposit "alice" DEPOSIT_0))

; Verify the balance after
(expect-that "Balance after deposit" (between 989.0 990.0) (coin.get-balance "alice"))
(expect-that "Deposit count must have been incremented" (compose (at 'deposit-count) (= 1)) (get-state "10KDA"))
(commit-tx)

; Try to withdraw
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)

; Verify the balance of Bob before
(expect "Balance before withdraw" 1000.0 (coin.get-balance "bob"))

; Process te deposit
(env-chain-data {'block-height:300})

; And retry to withdraw
; But first with a bad proof
(expect-failure "Must not work => Bad paramaters" "does not match" (withdraw "bob" WITHDRAW_0_0_NULL WITHDRAW_0_0_ROOT WITHDRAW_0_1_PROOF))
; A bad root
(expect-failure "Must not work => Bad paramaters" "unknown" (withdraw "bob" WITHDRAW_0_0_NULL WITHDRAW_0_1_ROOT WITHDRAW_0_0_PROOF))
; And a bad nullifier
(expect-failure "Must not work => Bad paramaters" "does not match" (withdraw "bob" WITHDRAW_1_1_NULL WITHDRAW_0_0_ROOT WITHDRAW_0_0_PROOF))
; And a bad account
(expect-failure "Must not work => Bad paramaters" "does not match" (withdraw "carol" WITHDRAW_0_0_NULL WITHDRAW_0_0_ROOT WITHDRAW_0_0_PROOF))


; And finally with everything OK
(withdraw "bob" WITHDRAW_0_0_NULL WITHDRAW_0_0_ROOT WITHDRAW_0_0_PROOF)
(expect "Balance after withdraw" 1010.0 (coin.get-balance "bob"))

; Try to withdraw again
(expect-failure "Double withdraw is porhibited" "already withdrawn" (withdraw "bob" WITHDRAW_0_0_NULL WITHDRAW_0_0_ROOT WITHDRAW_0_0_PROOF))
(commit-tx)

; Check another time to deposit the same commitment
; Because here the commitment is not in queue anymore but should however fail
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 11.0)]}])
; Try to deposit 2 times
(expect-failure "Can't deposit 2 times with the same commitment" "already submitted" (deposit "alice" DEPOSIT_0))
(commit-tx)


; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; Deposits 3 times in a row
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
; Verify the balance before
(expect-that "Balance before deposit" (between 989.0 990.0) (coin.get-balance "alice"))
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 11.0)]}])
(deposit "alice" DEPOSIT_1)

; Verify the balance after
(expect-that "Balance after deposit" (between 979.0 980.0) (coin.get-balance "alice"))
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
; Verify the balance before
(expect-that "Balance before deposit" (between 979.0 980.0) (coin.get-balance "alice"))
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 11.0)]}])
(deposit "alice" DEPOSIT_2)

; Verify the balance after
(expect-that "Balance after deposit" (between 969.0 970.0) (coin.get-balance "alice"))
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
; Verify the balance before
(expect-that "Balance before deposit" (between 969.0 970.0) (coin.get-balance "alice"))
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 11.0)]}])
(deposit "alice" DEPOSIT_3)

; Verify the balance after
(expect-that "Balance after deposit" (between 959.0 960.0) (coin.get-balance "alice"))
(commit-tx)


; And withdraw in various order using various roots
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_3_3_NULL WITHDRAW_3_3_ROOT WITHDRAW_3_3_PROOF)
(expect "Balance after withdraw" 1020.0 (coin.get-balance "bob"))
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_2_3_NULL WITHDRAW_2_3_ROOT WITHDRAW_2_3_PROOF)
(expect "Balance after withdraw" 1030.0 (coin.get-balance "bob"))
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_1_3_NULL WITHDRAW_1_3_ROOT WITHDRAW_1_3_PROOF)
(expect "Balance after withdraw" 1040.0 (coin.get-balance "bob"))
(commit-tx)


; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; Deposits now 16 times in a row
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
; Verify the balance before
(expect-that "Balance before deposit" (between 959.0 960.0) (coin.get-balance "alice"))
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 161.0)]}])
(deposit "alice" DEPOSIT_4)
(deposit "alice" DEPOSIT_5)
(deposit "alice" DEPOSIT_6)
(deposit "alice" DEPOSIT_7)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(deposit "alice" DEPOSIT_8)
(deposit "alice" DEPOSIT_9)
(deposit "alice" DEPOSIT_10)
(deposit "alice" DEPOSIT_11)
(commit-tx)


(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(deposit "alice" DEPOSIT_12)
(deposit "alice" DEPOSIT_13)
(deposit "alice" DEPOSIT_14)
(deposit "alice" DEPOSIT_15)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
(deposit "alice" DEPOSIT_16)
(deposit "alice" DEPOSIT_17)
(deposit "alice" DEPOSIT_18)
(deposit "alice" DEPOSIT_19)

; Verify the balance after
(expect-that "Balance after deposit" (between 799.0 800.0) (coin.get-balance "alice"))

(commit-tx)

; Do some withdrawn
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_10_10_NULL WITHDRAW_10_10_ROOT WITHDRAW_10_10_PROOF)
(expect-that "Balance after withdraw" (< 1049.0) (coin.get-balance "bob"))
; We rollback to try to withdraw with another root as well
(rollback-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_10_18_NULL WITHDRAW_10_18_ROOT WITHDRAW_10_18_PROOF)
(expect-that "Balance after withdraw" (< 1049.0) (coin.get-balance "bob"))
(commit-tx)


(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_19_19_NULL WITHDRAW_19_19_ROOT WITHDRAW_19_19_PROOF)
(expect-that "Balance after withdraw" (< 1059.0) (coin.get-balance "bob"))
(commit-tx)

; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; ------------------------------------------------------------------------------
; Now we are filling several levels of the tree until rank 65 and checks that everything is fine
; This test as well the filling of the known-root hist
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
; Verify the balance before
(expect-that "Balance before deposit" (between 799.0 800.0) (coin.get-balance "alice"))
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 40.0 )]}])
(deposit "alice" DEPOSIT_20)
(deposit "alice" DEPOSIT_21)
(deposit "alice" DEPOSIT_22)
(deposit "alice" DEPOSIT_23)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" RESERVE 40.0 )]}])
(deposit "alice" DEPOSIT_24)
(deposit "alice" DEPOSIT_25)
(deposit "alice" DEPOSIT_26)
(deposit "alice" DEPOSIT_27)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(deposit "alice" DEPOSIT_28)
(deposit "alice" DEPOSIT_29)
(deposit "alice" DEPOSIT_30)
(deposit "alice" DEPOSIT_31)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(deposit "alice" DEPOSIT_32)
(deposit "alice" DEPOSIT_33)
(deposit "alice" DEPOSIT_34)
(deposit "alice" DEPOSIT_35)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(deposit "alice" DEPOSIT_36)
(deposit "alice" DEPOSIT_37)
(deposit "alice" DEPOSIT_38)
(deposit "alice" DEPOSIT_39)
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(use free.util-math)
(deposit "alice" DEPOSIT_40)
(deposit "alice" DEPOSIT_41)
(expect-that "Balance after deposit" (between 479.0 580.0) (coin.get-balance "alice"))
(expect "Deposit count must have been incremented to 42" 42 (at 'deposit-count (get-state "10KDA")))
(commit-tx)



; Do some withdrawals now
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)

; Withdrawl from an old root shoudn't work
(expect-failure "The root is too old" "root unknown" (withdraw "bob" WITHDRAW_4_4_NULL WITHDRAW_4_4_ROOT WITHDRAW_4_4_PROOF))
; But with a more recent root => Shoudl work
(withdraw "bob" WITHDRAW_4_40_NULL WITHDRAW_4_40_ROOT WITHDRAW_4_40_PROOF)
(expect-that "Balance after withdraw" (< 1069.0) (coin.get-balance "bob"))
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_40_40_NULL WITHDRAW_40_40_ROOT WITHDRAW_40_40_PROOF)
(expect-that "Balance after withdraw" (< 1079.0) (coin.get-balance "bob"))
(commit-tx)

(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(withdraw "bob" WITHDRAW_41_41_NULL WITHDRAW_41_41_ROOT WITHDRAW_41_41_PROOF)
(expect-that "Balance after withdraw" (< 1089.0) (coin.get-balance "bob"))
(commit-tx)

;;;;;  ---------------------------- LOCAL FUNCTIONS TEST ----------------------
(begin-tx)
(use free.cyKlone-v04-multipool)
(use test-vectors)
(expect "Deposit rank is OK" {'rank:10, 'pool:"10KDA"} (get-deposit-data DEPOSIT_10))
(expect "Commitment not deposited => -1" {'rank:-1, 'pool:""} (get-deposit-data DEPOSIT_45))

(expect "Nullifier state of an already withdrawn => True" true (get-nullifier-state WITHDRAW_41_41_NULL))
(expect "Nullifier state of not withdrawn => False" false (get-nullifier-state WITHDRAW_36_36_NULL))

(expect "Check a deposit range" [DEPOSIT_12, DEPOSIT_13, DEPOSIT_14, DEPOSIT_15] (get-deposits-range "10KDA" 12 15))
(expect "Check a deposit range" [DEPOSIT_39, DEPOSIT_40, DEPOSIT_41] (get-deposits-range "10KDA" 39 45))
