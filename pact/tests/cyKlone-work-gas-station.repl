(load "../kadena_repl_sandbox/kda-env/init.repl")

(begin-tx)
(namespace 'free)
(env-data {'ks:["governance-key"]})
(env-keys ["governance-key"] )
(define-keyset "free.cyKlone-test-ks" (read-keyset 'ks))

;Stub module
(module cyKlone-v0-10 G
  (defcap G () true)
  (defschema S my-bool:bool)
  (deftable T:{S})

  (defun set-true()
    (write T "" {'my-bool:true}))

  (defun set-false()
    (write T "" {'my-bool:false}))

  (defun has-work:bool ()
    (with-read T "" {'my-bool:=b} b))
)
(create-table T)
(set-true)


(namespace 'free)
(load "../contracts/cyklone-work-gas-station.pact")
(free.cyKlone-work-gas-station.init)
(commit-tx)

(env-data {})
(env-keys [])

; Fund the gas station
(begin-tx)
(use free.cyKlone-work-gas-station)
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" ACCOUNT 1.0)]}])
(coin.transfer "alice" ACCOUNT 1.0)
(commit-tx)


(begin-tx)
(use free.cyKlone-work-gas-station)
(env-chain-data { "gas-price":  0.00000001, "gas-limit": 120000})
(env-data { "tx-type": "exec", "exec-code": ["(free.cyKlone-v0-10.work)"]})

(test-capability (coin.GAS))
(test-capability (GAS_PAYER "user" 1 1.0))
(expect "buy gas succeeds" "Write succeeded" (coin.buy-gas ACCOUNT  1.0))
(commit-tx)


(begin-tx)
(use free.cyKlone-work-gas-station)
(env-chain-data { "gas-price":  0.00000002, "gas-limit": 120000})
(env-data { "tx-type": "exec", "exec-code": ["(free.cyKlone-v0-10.work)"]})

(test-capability (coin.GAS))
(expect-failure "Fail bad gas" "Gas" (test-capability (GAS_PAYER "user" 1 1.0)))
(commit-tx)


(begin-tx)
(use free.cyKlone-work-gas-station)
(env-chain-data { "gas-price":  0.00000001, "gas-limit": 120000})
(env-data { "tx-type": "exec", "exec-code": ["(free.sex)"]})

(test-capability (coin.GAS))
(expect-failure "Fail bad code" "Code" (test-capability (GAS_PAYER "user" 1 1.0)))
(commit-tx)


(begin-tx)
(use free.cyKlone-work-gas-station)
(free.cyKlone-v0-10.set-false)

(env-chain-data { "gas-price":  0.00000001, "gas-limit": 120000})
(env-data { "tx-type": "exec", "exec-code": ["(free.cyKlone-v0-10.work)"]})
(print (free.cyKlone-v0-10.has-work))
(test-capability (coin.GAS))
(expect-failure "Fail bad code" "No work" (test-capability (GAS_PAYER "user" 1 1.0)))
(commit-tx)
